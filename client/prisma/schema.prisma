generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Role {
    id        Int        @id @default(autoincrement())
    name      String     @unique
    UserRoles UserRole[]
}

model UserRole {
    userId Int
    roleId Int
    role   Role @relation(fields: [roleId], references: [id])
    user   User @relation(fields: [userId], references: [id])

    @@id([userId, roleId])
}

model User {
    id              Int              @id @default(autoincrement())
    username        String           @unique
    firstName       String?
    lastName        String?
    image           String?
    passwordHash    String           @map("password_hash")
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
    Transaction     Transaction[]
    userPermissions UserPermission[]
    userRoles       UserRole[]
}

model Kid {
    id            Int             @id @default(autoincrement())
    firstName     String          @map("first_name")
    lastName      String          @map("last_name")
    dateOfBirth   DateTime        @default(now()) @map("date_of_birth")
    phoneNumber   String?         @map("phone_number")
    notes         String?
    image         String?
    gender        Gender?
    loanBalance   Float           @default(0) @map("loan_balance")
    dateJoined    DateTime        @default(now()) @map("date_joined")
    createdAt     DateTime        @default(now()) @map("created_at")
    updatedAt     DateTime        @default(now()) @updatedAt
    attendances   Attendance[]
    payments      Payment[]
    purchases     PurchasedItem[]
    subscriptions Subscription[]
    Transaction   Transaction[]
}

model Attendance {
    id          Int             @id @default(autoincrement())
    kidId       Int             @map("kid_id")
    note        String?
    extraCharge Float?          @map("extra_charge")
    date        DateTime
    kid         Kid             @relation(fields: [kidId], references: [id])
    purchases   PurchasedItem[]

    @@unique([kidId, date])
}

model PurchasedItem {
    id           Int         @id @default(autoincrement())
    kidId        Int         @map("kid_id")
    attendanceId Int?        @map("attendance_id")
    purchaseDate DateTime    @map("purchase_date")
    note         String?
    totalPrice   Float       @map("total_price")
    paidAmount   Float       @map("paid_amount")
    attendance   Attendance? @relation(fields: [attendanceId], references: [id])
    kid          Kid         @relation(fields: [kidId], references: [id])
}

model SubscriptionPlan {
    id            Int            @id @default(autoincrement())
    name          String
    price         Float
    duration      Int            @default(1)
    description   String?
    billingMode   BillingMode    @default(PREPAID)
    subscriptions Subscription[]
}

model Subscription {
    id                 Int                @id @default(autoincrement())
    kidId              Int                @map("kid_id")
    planId             Int                @map("plan_id")
    startDate          DateTime           @map("start_date")
    endDate            DateTime?          @map("end_date")
    price              Float
    discountPercentage Float?             @map("discount_percentage")
    amountPaid         Float              @default(0) @map("amount_paid")
    status             SubscriptionStatus
    createdAt          DateTime           @default(now())
    updatedAt          DateTime           @updatedAt
    kid                Kid                @relation(fields: [kidId], references: [id])
    plan               SubscriptionPlan   @relation(fields: [planId], references: [id])
}

model Payment {
    id          Int      @id @default(autoincrement())
    kidId       Int      @map("kid_id")
    amount      Float
    paymentDate DateTime @map("payment_date")
    note        String?
    kid         Kid      @relation(fields: [kidId], references: [id])
}

model Transaction {
    id                           Int      @id @default(autoincrement())
    kidId                        Int      @map("kid_id")
    userId                       Int      @map("user_id")
    loanBalanceBeforeTransaction Float    @map("loan_balance_before_transaction")
    loanBalanceAfterTransaction  Float    @map("loan_balance_after_transaction")
    exchangeOfLoans              Float    @map("exchange_of_loans")
    transactionDate              DateTime @default(now()) @map("transaction_date")
    note                         String?
    createdAt                    DateTime @default(now()) @map("created_at")
    updatedAt                    DateTime @updatedAt
    Kid                          Kid      @relation(fields: [kidId], references: [id])
    User                         User     @relation(fields: [userId], references: [id])

    @@index([kidId])
    @@index([transactionDate])
    @@index([userId])
}

model Expense {
    id          Int      @id @default(autoincrement())
    title       String
    description String?
    amount      Float
    paidAmount  Float
    amountDue   Float
    date        DateTime
}

model Note {
    id           Int       @id @default(autoincrement())
    title        String
    isArchived   Boolean   @default(false)
    description  String?
    reminderDate DateTime? @map("reminder_date")
}

model ContactMessage {
    id        Int      @id @default(autoincrement())
    name      String
    email     String
    childName String
    childAge  Int
    phone     String
    message   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model PermissionModule {
    id              Int                @id @default(autoincrement())
    name            String             @unique
    actions         PermissionAction[]
    userPermissions UserPermission[]
}

model PermissionAction {
    id              Int              @id @default(autoincrement())
    name            String
    moduleId        Int
    module          PermissionModule @relation(fields: [moduleId], references: [id])
    userPermissions UserPermission[]

    @@unique([name, moduleId])
}

model UserPermission {
    id                 Int               @id @default(autoincrement())
    userId             Int
    actionId           Int
    allowed            Boolean           @default(false)
    permissionModuleId Int?
    action             PermissionAction  @relation(fields: [actionId], references: [id])
    PermissionModule   PermissionModule? @relation(fields: [permissionModuleId], references: [id])
    user               User              @relation(fields: [userId], references: [id])
}

enum Gender {
    MALE
    FEMALE
}

enum BillingMode {
    PREPAID
    USAGE
}

enum SubscriptionStatus {
    ACTIVE
    CANCELLED
    COMPLETED
}
