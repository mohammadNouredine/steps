generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Role {
    id        Int        @id @default(autoincrement())
    name      String     @unique
    UserRoles UserRole[]
}

model UserRole {
    userId Int
    roleId Int
    role   Role @relation(fields: [roleId], references: [id])
    user   User @relation(fields: [userId], references: [id])

    @@id([userId, roleId])
}

model User {
    id              Int              @id @default(autoincrement())
    username        String           @unique
    firstName       String?
    lastName        String?
    image           String?
    passwordHash    String           @map("password_hash")
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
    Transaction     Transaction[]
    userPermissions UserPermission[]
    userRoles       UserRole[]
    kidTransactions KidTransaction[]
}

model Kid {
    id              Int              @id @default(autoincrement())
    firstName       String           @map("first_name")
    lastName        String           @map("last_name")
    dateOfBirth     DateTime         @default(now()) @map("date_of_birth")
    phoneNumber     String?          @map("phone_number")
    notes           String?
    image           String?
    gender          Gender?
    loanBalance     Float            @default(0) @map("loan_balance")
    dateJoined      DateTime         @default(now()) @map("date_joined")
    createdAt       DateTime         @default(now()) @map("created_at")
    updatedAt       DateTime         @default(now()) @updatedAt
    attendances     Attendance[]
    payments        Payment[]
    purchases       PurchasedItem[]
    subscriptions   Subscription[]
    Transaction     Transaction[]
    kidTransactions KidTransaction[]
}

model Attendance {
    id              Int              @id @default(autoincrement())
    kidId           Int              @map("kid_id")
    note            String?
    extraCharge     Float?           @map("extra_charge")
    date            DateTime
    kid             Kid              @relation(fields: [kidId], references: [id])
    purchases       PurchasedItem[]
    kidTransactions KidTransaction[]

    @@unique([kidId, date])
}

model PurchasedItem {
    id              Int              @id @default(autoincrement())
    kidId           Int              @map("kid_id")
    attendanceId    Int?             @map("attendance_id")
    purchaseDate    DateTime         @map("purchase_date")
    note            String?
    totalPrice      Float            @map("total_price")
    paidAmount      Float            @map("paid_amount")
    attendance      Attendance?      @relation(fields: [attendanceId], references: [id])
    kid             Kid              @relation(fields: [kidId], references: [id])
    kidTransactions KidTransaction[]
}

model SubscriptionPlan {
    id            Int            @id @default(autoincrement())
    name          String
    price         Float
    duration      Int            @default(1)
    description   String?
    billingMode   BillingMode    @default(PREPAID)
    subscriptions Subscription[]
}

model Subscription {
    id                 Int                @id @default(autoincrement())
    kidId              Int                @map("kid_id")
    planId             Int                @map("plan_id")
    startDate          DateTime           @map("start_date")
    endDate            DateTime?          @map("end_date")
    price              Float
    discountPercentage Float?             @map("discount_percentage")
    amountPaid         Float              @default(0) @map("amount_paid")
    status             SubscriptionStatus
    createdAt          DateTime           @default(now())
    updatedAt          DateTime           @updatedAt
    kid                Kid                @relation(fields: [kidId], references: [id])
    plan               SubscriptionPlan   @relation(fields: [planId], references: [id])
    kidTransactions    KidTransaction[]
}

model Payment {
    id              Int              @id @default(autoincrement())
    kidId           Int              @map("kid_id")
    amount          Float
    paymentDate     DateTime         @map("payment_date")
    note            String?
    kid             Kid              @relation(fields: [kidId], references: [id])
    kidTransactions KidTransaction[]
}

model Transaction {
    id                           Int      @id @default(autoincrement())
    kidId                        Int      @map("kid_id")
    userId                       Int      @map("user_id")
    loanBalanceBeforeTransaction Float    @map("loan_balance_before_transaction")
    loanBalanceAfterTransaction  Float    @map("loan_balance_after_transaction")
    exchangeOfLoans              Float    @map("exchange_of_loans")
    transactionDate              DateTime @default(now()) @map("transaction_date")
    note                         String?
    createdAt                    DateTime @default(now()) @map("created_at")
    updatedAt                    DateTime @updatedAt
    Kid                          Kid      @relation(fields: [kidId], references: [id])
    User                         User     @relation(fields: [userId], references: [id])

    @@index([kidId])
    @@index([transactionDate])
    @@index([userId])
}

model Expense {
    id          Int      @id @default(autoincrement())
    title       String
    description String?
    amount      Float
    paidAmount  Float
    amountDue   Float
    date        DateTime
}

model Note {
    id           Int       @id @default(autoincrement())
    title        String
    isArchived   Boolean   @default(false)
    description  String?
    reminderDate DateTime? @map("reminder_date")
}

model ContactMessage {
    id        Int      @id @default(autoincrement())
    name      String
    email     String
    childName String
    childAge  Int
    phone     String
    message   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model PermissionModule {
    id              Int                @id @default(autoincrement())
    name            String             @unique
    actions         PermissionAction[]
    userPermissions UserPermission[]
}

model PermissionAction {
    id              Int              @id @default(autoincrement())
    name            String
    moduleId        Int
    module          PermissionModule @relation(fields: [moduleId], references: [id])
    userPermissions UserPermission[]

    @@unique([name, moduleId])
}

model UserPermission {
    id                 Int               @id @default(autoincrement())
    userId             Int
    actionId           Int
    allowed            Boolean           @default(false)
    permissionModuleId Int?
    action             PermissionAction  @relation(fields: [actionId], references: [id])
    PermissionModule   PermissionModule? @relation(fields: [permissionModuleId], references: [id])
    user               User              @relation(fields: [userId], references: [id])
}

model KidTransaction {
    id            Int                     @id @default(autoincrement())
    kidId         Int                     @map("kid_id")
    userId        Int                     @map("user_id")
    actionType    KidTransactionAction    @map("action_type")
    operationType KidTransactionOperation @map("operation_type")

    // Loan balance tracking
    loanBalanceBefore Float @map("loan_balance_before")
    loanBalanceAfter  Float @map("loan_balance_after")

    // Transaction amount details
    transactionAmount Float  @map("transaction_amount")
    discountAmount    Float? @map("discount_amount")
    totalAmount       Float  @map("total_amount")

    // Related entity references (optional, for tracking what was modified)
    relatedKidId          Int? @map("related_kid_id")
    relatedPaymentId      Int? @map("related_payment_id")
    relatedSubscriptionId Int? @map("related_subscription_id")
    relatedAttendanceId   Int? @map("related_attendance_id")
    relatedPurchaseId     Int? @map("related_purchase_id")

    // Additional metadata
    description String?
    metadata    Json? // For storing additional data like old/new values for updates

    // Timestamps
    transactionDate DateTime @default(now()) @map("transaction_date")
    createdAt       DateTime @default(now()) @map("created_at")
    updatedAt       DateTime @updatedAt

    // Relations
    kid  Kid  @relation(fields: [kidId], references: [id])
    user User @relation(fields: [userId], references: [id])

    // Optional relations to track what was modified
    relatedPayment      Payment?       @relation(fields: [relatedPaymentId], references: [id])
    relatedSubscription Subscription?  @relation(fields: [relatedSubscriptionId], references: [id])
    relatedAttendance   Attendance?    @relation(fields: [relatedAttendanceId], references: [id])
    relatedPurchase     PurchasedItem? @relation(fields: [relatedPurchaseId], references: [id])

    // Indexes for better query performance
    @@index([kidId])
    @@index([userId])
    @@index([actionType])
    @@index([operationType])
    @@index([transactionDate])
    @@index([relatedKidId])
    @@index([relatedPaymentId])
    @@index([relatedSubscriptionId])
    @@index([relatedAttendanceId])
    @@index([relatedPurchaseId])
}

enum Gender {
    MALE
    FEMALE
}

enum BillingMode {
    PREPAID
    USAGE
}

enum SubscriptionStatus {
    ACTIVE
    CANCELLED
    COMPLETED
}

enum KidTransactionAction {
    KID_CREATE
    KID_UPDATE
    KID_DELETE
    PAYMENT_CREATE
    PAYMENT_UPDATE
    PAYMENT_DELETE
    SUBSCRIPTION_CREATE
    SUBSCRIPTION_UPDATE
    SUBSCRIPTION_DELETE
    ATTENDANCE_CREATE
    ATTENDANCE_UPDATE
    ATTENDANCE_DELETE
    PURCHASE_CREATE
    PURCHASE_UPDATE
    PURCHASE_DELETE
}

enum KidTransactionOperation {
    CREATE
    UPDATE
    DELETE
}
